-module(test_egl).
-export([print_config/2]).
-export([print_surface/2]).
-export([print_context/2]).

print_config(Display, Config) ->
    io:format(user, "=== Printing configuration attributes (~p)~n", [Config]),

    {ok, AlphaSize} = egl:get_config_attrib(Display, Config, alpha_size),
    {ok, AlphaMaskSize} = egl:get_config_attrib(Display, Config, alpha_mask_size),
    {ok, BindToTextureRgb} = egl:get_config_attrib(Display, Config, bind_to_texture_rgb),
    {ok, BindToTextureRgba} = egl:get_config_attrib(Display, Config, bind_to_texture_rgba),
    {ok, BlueSize} = egl:get_config_attrib(Display, Config, blue_size),
    {ok, BufferSize} = egl:get_config_attrib(Display, Config, buffer_size),
    {ok, ColorBufferType} = egl:get_config_attrib(Display, Config, color_buffer_type),
    {ok, ConfigCaveat} = egl:get_config_attrib(Display, Config, config_caveat),
    {ok, ConfigId} = egl:get_config_attrib(Display, Config, config_id),
    {ok, Conformant} = egl:get_config_attrib(Display, Config, conformant),
    {ok, DepthSize} = egl:get_config_attrib(Display, Config, depth_size),
    {ok, GreenSize} = egl:get_config_attrib(Display, Config, green_size),
    {ok, Level} = egl:get_config_attrib(Display, Config, level),
    {ok, LuminanceSize} = egl:get_config_attrib(Display, Config, luminance_size),
    {ok, MaxPbufferWidth} = egl:get_config_attrib(Display, Config, max_pbuffer_width),
    {ok, MaxPbufferHeight} = egl:get_config_attrib(Display, Config, max_pbuffer_height),
    {ok, MaxPbufferPixels} = egl:get_config_attrib(Display, Config, max_pbuffer_pixels),
    {ok, MaxSwapInterval} = egl:get_config_attrib(Display, Config, max_swap_interval),
    {ok, MinSwapInterval} = egl:get_config_attrib(Display, Config, min_swap_interval),
    {ok, NativeRenderable} = egl:get_config_attrib(Display, Config, native_renderable),
    {ok, NativeVisualId} = egl:get_config_attrib(Display, Config, native_visual_id),
    {ok, NativeVisualType} = egl:get_config_attrib(Display, Config, native_visual_type),
    {ok, RedSize} = egl:get_config_attrib(Display, Config, red_size),
    {ok, RenderableType} = egl:get_config_attrib(Display, Config, renderable_type),
    {ok, SampleBuffers} = egl:get_config_attrib(Display, Config, sample_buffers),
    {ok, Samples} = egl:get_config_attrib(Display, Config, samples),
    {ok, StencilSize} = egl:get_config_attrib(Display, Config, stencil_size),
    {ok, SurfaceType} = egl:get_config_attrib(Display, Config, surface_type),
    {ok, TransparentType} = egl:get_config_attrib(Display, Config, transparent_type),
    {ok, TransparentRedValue} = egl:get_config_attrib(Display, Config, transparent_red_value),
    {ok, TransparentGreenValue} = egl:get_config_attrib(Display, Config, transparent_green_value),
    {ok, TransparentBlueValue} = egl:get_config_attrib(Display, Config, transparent_blue_value),

    io:format(user, "AlphaSize: ~p~n", [AlphaSize]),
    io:format(user, "AlphaMaskSize: ~p~n", [AlphaMaskSize]),
    io:format(user, "BindToTextureRgb: ~p~n", [BindToTextureRgb]),
    io:format(user, "BindToTextureRgba: ~p~n", [BindToTextureRgba]),
    io:format(user, "BlueSize: ~p~n", [BlueSize]),
    io:format(user, "BufferSize: ~p~n", [BufferSize]),
    io:format(user, "ColorBufferType: ~p~n", [ColorBufferType]),
    io:format(user, "ConfigCaveat: ~p~n", [ConfigCaveat]),
    io:format(user, "ConfigId: ~p~n", [ConfigId]),
    io:format(user, "Conformant: ~p~n", [Conformant]),
    io:format(user, "DepthSize: ~p~n", [DepthSize]),
    io:format(user, "GreenSize: ~p~n", [GreenSize]),
    io:format(user, "Level: ~p~n", [Level]),
    io:format(user, "LuminanceSize: ~p~n", [LuminanceSize]),
    io:format(user, "MaxPbufferWidth: ~p~n", [MaxPbufferWidth]),
    io:format(user, "MaxPbufferHeight: ~p~n", [MaxPbufferHeight]),
    io:format(user, "MaxPbufferPixels: ~p~n", [MaxPbufferPixels]),
    io:format(user, "MaxSwapInterval: ~p~n", [MaxSwapInterval]),
    io:format(user, "MinSwapInterval: ~p~n", [MinSwapInterval]),
    io:format(user, "NativeRenderable: ~p~n", [NativeRenderable]),
    io:format(user, "NativeVisualId: ~p~n", [NativeVisualId]),
    io:format(user, "NativeVisualType: ~p~n", [NativeVisualType]),
    io:format(user, "RedSize: ~p~n", [RedSize]),
    io:format(user, "RenderableType: ~p~n", [RenderableType]),
    io:format(user, "SampleBuffers: ~p~n", [SampleBuffers]),
    io:format(user, "Samples: ~p~n", [Samples]),
    io:format(user, "StencilSize: ~p~n", [StencilSize]),
    io:format(user, "SurfaceType: ~p~n", [SurfaceType]),
    io:format(user, "TransparentType: ~p~n", [TransparentType]),
    io:format(user, "TransparentRedValue: ~p~n", [TransparentRedValue]),
    io:format(user, "TransparentGreenValue: ~p~n", [TransparentGreenValue]),
    io:format(user, "TransparentBlueValue: ~p~n", [TransparentBlueValue]),

    ok.

print_surface(Display, Surface) ->
    io:format(user, "=== Printing surface attributes (~p)~n", [Surface]),

    {ok, ConfigId} = egl:query_surface(Display, Surface, config_id),
    {ok, GlColorSpace} = egl:query_surface(Display, Surface, gl_colorspace),
    {ok, Height} = egl:query_surface(Display, Surface, height),
    {ok, HorizontalResolution} = egl:query_surface(Display, Surface, horizontal_resolution),
    {ok, LargestPbuffer} = egl:query_surface(Display, Surface, largest_pbuffer),
    {ok, MipmapLevel} = egl:query_surface(Display, Surface, mipmap_level),
    {ok, MipmapTexture} = egl:query_surface(Display, Surface, mipmap_texture),
    {ok, MultisampleResolve} = egl:query_surface(Display, Surface, multisample_resolve),
    {ok, PixelAspectRatio} = egl:query_surface(Display, Surface, pixel_aspect_ratio),
    {ok, RenderBuffer} = egl:query_surface(Display, Surface, render_buffer),
    {ok, SwapBehavior} = egl:query_surface(Display, Surface, swap_behavior),
    {ok, TextureFormat} = egl:query_surface(Display, Surface, texture_format),
    {ok, TextureTarget} = egl:query_surface(Display, Surface, texture_target),
    {ok, VerticalResolution} = egl:query_surface(Display, Surface, vertical_resolution),
    {ok, VgAlphaFormat} = egl:query_surface(Display, Surface, vg_alpha_format),
    {ok, VgColorSpace} = egl:query_surface(Display, Surface, vg_colorspace),
    {ok, Width} = egl:query_surface(Display, Surface, width),

    io:format(user, "ConfigId: ~p~n", [ConfigId]),
    io:format(user, "GlColorSpace: ~p~n", [GlColorSpace]),
    io:format(user, "Height: ~p~n", [Height]),
    io:format(user, "HorizontalResolution: ~p~n", [HorizontalResolution]),
    io:format(user, "LargestPbuffer: ~p~n", [LargestPbuffer]),
    io:format(user, "MipmapLevel: ~p~n", [MipmapLevel]),
    io:format(user, "MipmapTexture: ~p~n", [MipmapTexture]),
    io:format(user, "MultisampleResolve: ~p~n", [MultisampleResolve]),
    io:format(user, "PixelAspectRatio: ~p~n", [PixelAspectRatio]),
    io:format(user, "RenderBuffer: ~p~n", [RenderBuffer]),
    io:format(user, "SwapBehavior: ~p~n", [SwapBehavior]),
    io:format(user, "TextureFormat: ~p~n", [TextureFormat]),
    io:format(user, "TextureTarget: ~p~n", [TextureTarget]),
    io:format(user, "VerticalResolution: ~p~n", [VerticalResolution]),
    io:format(user, "VgAlphaFormat: ~p~n", [VgAlphaFormat]),
    io:format(user, "VgColorSpace: ~p~n", [VgColorSpace]),
    io:format(user, "Width: ~p~n", [Width]),

    ok.

print_context(Display, Context) ->
    io:format(user, "=== Printing context attributes (~p)~n", [Context]),

    {ok, ConfigId} = egl:query_context(Display, Context, config_id),
    {ok, ContextClientType} = egl:query_context(Display, Context, context_client_type),
    {ok, ContextClientVersion} = egl:query_context(Display, Context, context_client_version),
    {ok, RenderBuffer} = egl:query_context(Display, Context, render_buffer),

    io:format(user, "ConfigId: ~p~n", [ConfigId]),
    io:format(user, "ContextClientType: ~p~n", [ContextClientType]),
    io:format(user, "ContextClientVersion: ~p~n", [ContextClientVersion]),
    io:format(user, "RenderBuffer: ~p~n", [RenderBuffer]),

    ok.
